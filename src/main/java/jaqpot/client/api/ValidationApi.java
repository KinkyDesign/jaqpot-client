/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiCallback;
import jaqpot.client.ApiClient;
import jaqpot.client.ApiException;
import jaqpot.client.ApiResponse;
import jaqpot.client.Configuration;
import jaqpot.client.Pair;
import jaqpot.client.ProgressRequestBody;
import jaqpot.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import jaqpot.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidationApi {
    private ApiClient apiClient;

    public ValidationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for crossValidateAlgorithm */
    private com.squareup.okhttp.Call crossValidateAlgorithmCall(String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, Integer folds, String stratify, Integer seed, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/validation/training_test_cross".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectId != null)
        localVarHeaderParams.put("subjectId", apiClient.parameterToString(subjectId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (algorithmUri != null)
        localVarFormParams.put("algorithm_uri", algorithmUri);
        if (trainingDatasetUri != null)
        localVarFormParams.put("training_dataset_uri", trainingDatasetUri);
        if (algorithmParams != null)
        localVarFormParams.put("algorithm_params", algorithmParams);
        if (predictionFeature != null)
        localVarFormParams.put("prediction_feature", predictionFeature);
        if (transformations != null)
        localVarFormParams.put("transformations", transformations);
        if (scaling != null)
        localVarFormParams.put("scaling", scaling);
        if (folds != null)
        localVarFormParams.put("folds", folds);
        if (stratify != null)
        localVarFormParams.put("stratify", stratify);
        if (seed != null)
        localVarFormParams.put("seed", seed);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call crossValidateAlgorithmValidateBeforeCall(String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, Integer folds, String stratify, Integer seed, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = crossValidateAlgorithmCall(algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, folds, stratify, seed, subjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param folds  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task crossValidateAlgorithm(String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, Integer folds, String stratify, Integer seed, String subjectId) throws ApiException {
        ApiResponse<Task> resp = crossValidateAlgorithmWithHttpInfo(algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, folds, stratify, seed, subjectId);
        return resp.getData();
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param folds  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> crossValidateAlgorithmWithHttpInfo(String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, Integer folds, String stratify, Integer seed, String subjectId) throws ApiException {
        com.squareup.okhttp.Call call = crossValidateAlgorithmValidateBeforeCall(algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, folds, stratify, seed, subjectId, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Validation Report (asynchronously)
     * Creates Validation Report
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param folds  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call crossValidateAlgorithmAsync(String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, Integer folds, String stratify, Integer seed, String subjectId, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = crossValidateAlgorithmValidateBeforeCall(algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, folds, stratify, seed, subjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for externalValidateAlgorithm */
    private com.squareup.okhttp.Call externalValidateAlgorithmCall(String modelUri, String testDatasetUri, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/validation/test_set_validation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectId != null)
        localVarHeaderParams.put("subjectId", apiClient.parameterToString(subjectId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (modelUri != null)
        localVarFormParams.put("model_uri", modelUri);
        if (testDatasetUri != null)
        localVarFormParams.put("test_dataset_uri", testDatasetUri);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call externalValidateAlgorithmValidateBeforeCall(String modelUri, String testDatasetUri, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = externalValidateAlgorithmCall(modelUri, testDatasetUri, subjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param modelUri  (optional)
     * @param testDatasetUri  (optional)
     * @param subjectId  (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task externalValidateAlgorithm(String modelUri, String testDatasetUri, String subjectId) throws ApiException {
        ApiResponse<Task> resp = externalValidateAlgorithmWithHttpInfo(modelUri, testDatasetUri, subjectId);
        return resp.getData();
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param modelUri  (optional)
     * @param testDatasetUri  (optional)
     * @param subjectId  (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> externalValidateAlgorithmWithHttpInfo(String modelUri, String testDatasetUri, String subjectId) throws ApiException {
        com.squareup.okhttp.Call call = externalValidateAlgorithmValidateBeforeCall(modelUri, testDatasetUri, subjectId, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Validation Report (asynchronously)
     * Creates Validation Report
     * @param modelUri  (optional)
     * @param testDatasetUri  (optional)
     * @param subjectId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call externalValidateAlgorithmAsync(String modelUri, String testDatasetUri, String subjectId, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = externalValidateAlgorithmValidateBeforeCall(modelUri, testDatasetUri, subjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for splitValidateAlgorithm */
    private com.squareup.okhttp.Call splitValidateAlgorithmCall(Double splitRatio, String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, String stratify, Integer seed, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/validation/training_test_split".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectId != null)
        localVarHeaderParams.put("subjectId", apiClient.parameterToString(subjectId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (algorithmUri != null)
        localVarFormParams.put("algorithm_uri", algorithmUri);
        if (trainingDatasetUri != null)
        localVarFormParams.put("training_dataset_uri", trainingDatasetUri);
        if (algorithmParams != null)
        localVarFormParams.put("algorithm_params", algorithmParams);
        if (predictionFeature != null)
        localVarFormParams.put("prediction_feature", predictionFeature);
        if (transformations != null)
        localVarFormParams.put("transformations", transformations);
        if (scaling != null)
        localVarFormParams.put("scaling", scaling);
        if (splitRatio != null)
        localVarFormParams.put("split_ratio", splitRatio);
        if (stratify != null)
        localVarFormParams.put("stratify", stratify);
        if (seed != null)
        localVarFormParams.put("seed", seed);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call splitValidateAlgorithmValidateBeforeCall(Double splitRatio, String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, String stratify, Integer seed, String subjectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'splitRatio' is set
        if (splitRatio == null) {
            throw new ApiException("Missing the required parameter 'splitRatio' when calling splitValidateAlgorithm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = splitValidateAlgorithmCall(splitRatio, algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, stratify, seed, subjectId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param splitRatio  (required)
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task splitValidateAlgorithm(Double splitRatio, String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, String stratify, Integer seed, String subjectId) throws ApiException {
        ApiResponse<Task> resp = splitValidateAlgorithmWithHttpInfo(splitRatio, algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, stratify, seed, subjectId);
        return resp.getData();
    }

    /**
     * Creates Validation Report
     * Creates Validation Report
     * @param splitRatio  (required)
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> splitValidateAlgorithmWithHttpInfo(Double splitRatio, String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, String stratify, Integer seed, String subjectId) throws ApiException {
        com.squareup.okhttp.Call call = splitValidateAlgorithmValidateBeforeCall(splitRatio, algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, stratify, seed, subjectId, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Validation Report (asynchronously)
     * Creates Validation Report
     * @param splitRatio  (required)
     * @param algorithmUri  (optional)
     * @param trainingDatasetUri  (optional)
     * @param algorithmParams  (optional)
     * @param predictionFeature  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param subjectId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitValidateAlgorithmAsync(Double splitRatio, String algorithmUri, String trainingDatasetUri, String algorithmParams, String predictionFeature, String transformations, String scaling, String stratify, Integer seed, String subjectId, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitValidateAlgorithmValidateBeforeCall(splitRatio, algorithmUri, trainingDatasetUri, algorithmParams, predictionFeature, transformations, scaling, stratify, seed, subjectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
