/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiCallback;
import jaqpot.client.ApiClient;
import jaqpot.client.ApiException;
import jaqpot.client.ApiResponse;
import jaqpot.client.Configuration;
import jaqpot.client.Pair;
import jaqpot.client.ProgressRequestBody;
import jaqpot.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import jaqpot.client.model.Dataset;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient apiClient;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createDataset */
    private com.squareup.okhttp.Call createDatasetCall(String subjectid, Dataset body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/dataset".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/uri-list", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDatasetValidateBeforeCall(String subjectid, Dataset body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createDatasetCall(subjectid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new Dataset
     * The new Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param body  (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset createDataset(String subjectid, Dataset body) throws ApiException {
        ApiResponse<Dataset> resp = createDatasetWithHttpInfo(subjectid, body);
        return resp.getData();
    }

    /**
     * Creates a new Dataset
     * The new Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> createDatasetWithHttpInfo(String subjectid, Dataset body) throws ApiException {
        com.squareup.okhttp.Call call = createDatasetValidateBeforeCall(subjectid, body, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Dataset (asynchronously)
     * The new Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDatasetAsync(String subjectid, Dataset body, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDatasetValidateBeforeCall(subjectid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createEmptyDataset */
    private com.squareup.okhttp.Call createEmptyDatasetCall(String subjectid, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/empty".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "text/uri-list", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEmptyDatasetValidateBeforeCall(String subjectid, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createEmptyDatasetCall(subjectid, title, description, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates a new empty Dataset
     * The new empty Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset createEmptyDataset(String subjectid, String title, String description) throws ApiException {
        ApiResponse<Dataset> resp = createEmptyDatasetWithHttpInfo(subjectid, title, description);
        return resp.getData();
    }

    /**
     * Creates a new empty Dataset
     * The new empty Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> createEmptyDatasetWithHttpInfo(String subjectid, String title, String description) throws ApiException {
        com.squareup.okhttp.Call call = createEmptyDatasetValidateBeforeCall(subjectid, title, description, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new empty Dataset (asynchronously)
     * The new empty Dataset created will be assigned on a random generated Id
     * @param subjectid Authorization token (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEmptyDatasetAsync(String subjectid, String title, String description, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEmptyDatasetValidateBeforeCall(subjectid, title, description, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createQPRFReport */
    private com.squareup.okhttp.Call createQPRFReportCall(String id, String subjectid, String substanceUri, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}/qprf".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (substanceUri != null)
        localVarFormParams.put("substance_uri", substanceUri);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQPRFReportValidateBeforeCall(String id, String subjectid, String substanceUri, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createQPRFReport(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createQPRFReportCall(id, subjectid, substanceUri, title, description, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates QPRF Report
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createQPRFReport(String id, String subjectid, String substanceUri, String title, String description) throws ApiException {
        createQPRFReportWithHttpInfo(id, subjectid, substanceUri, title, description);
    }

    /**
     * Creates QPRF Report
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createQPRFReportWithHttpInfo(String id, String subjectid, String substanceUri, String title, String description) throws ApiException {
        com.squareup.okhttp.Call call = createQPRFReportValidateBeforeCall(id, subjectid, substanceUri, title, description, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates QPRF Report (asynchronously)
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQPRFReportAsync(String id, String subjectid, String substanceUri, String title, String description, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQPRFReportValidateBeforeCall(id, subjectid, substanceUri, title, description, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createQPRFReportDummy */
    private com.squareup.okhttp.Call createQPRFReportDummyCall(String id, String subjectid, String substanceUri, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}/qprf-dummy".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (substanceUri != null)
        localVarFormParams.put("substance_uri", substanceUri);
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQPRFReportDummyValidateBeforeCall(String id, String subjectid, String substanceUri, String title, String description, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createQPRFReportDummy(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createQPRFReportDummyCall(id, subjectid, substanceUri, title, description, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates QPRF Report
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createQPRFReportDummy(String id, String subjectid, String substanceUri, String title, String description) throws ApiException {
        createQPRFReportDummyWithHttpInfo(id, subjectid, substanceUri, title, description);
    }

    /**
     * Creates QPRF Report
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createQPRFReportDummyWithHttpInfo(String id, String subjectid, String substanceUri, String title, String description) throws ApiException {
        com.squareup.okhttp.Call call = createQPRFReportDummyValidateBeforeCall(id, subjectid, substanceUri, title, description, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates QPRF Report (asynchronously)
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param substanceUri  (optional)
     * @param title  (optional)
     * @param description  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQPRFReportDummyAsync(String id, String subjectid, String substanceUri, String title, String description, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQPRFReportDummyValidateBeforeCall(id, subjectid, substanceUri, title, description, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteDataset */
    private com.squareup.okhttp.Call deleteDatasetCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDatasetValidateBeforeCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDataset(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDatasetCall(id, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes dataset
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDataset(String id, String subjectid) throws ApiException {
        deleteDatasetWithHttpInfo(id, subjectid);
    }

    /**
     * Deletes dataset
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDatasetWithHttpInfo(String id, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = deleteDatasetValidateBeforeCall(id, subjectid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes dataset (asynchronously)
     * 
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDatasetAsync(String id, String subjectid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDatasetValidateBeforeCall(id, subjectid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getDataset */
    private com.squareup.okhttp.Call getDatasetCall(String id, String subjectid, Integer rowStart, Integer rowMax, Integer colStart, Integer colMax, String stratify, Long seed, Integer folds, String targetFeature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (rowStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowStart", rowStart));
        if (rowMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "rowMax", rowMax));
        if (colStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "colStart", colStart));
        if (colMax != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "colMax", colMax));
        if (stratify != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stratify", stratify));
        if (seed != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "seed", seed));
        if (folds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "folds", folds));
        if (targetFeature != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "target_feature", targetFeature));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatasetValidateBeforeCall(String id, String subjectid, Integer rowStart, Integer rowMax, Integer colStart, Integer colMax, String stratify, Long seed, Integer folds, String targetFeature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDataset(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDatasetCall(id, subjectid, rowStart, rowMax, colStart, colMax, stratify, seed, folds, targetFeature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param rowStart  (optional)
     * @param rowMax  (optional)
     * @param colStart  (optional)
     * @param colMax  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param folds  (optional)
     * @param targetFeature  (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset getDataset(String id, String subjectid, Integer rowStart, Integer rowMax, Integer colStart, Integer colMax, String stratify, Long seed, Integer folds, String targetFeature) throws ApiException {
        ApiResponse<Dataset> resp = getDatasetWithHttpInfo(id, subjectid, rowStart, rowMax, colStart, colMax, stratify, seed, folds, targetFeature);
        return resp.getData();
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param rowStart  (optional)
     * @param rowMax  (optional)
     * @param colStart  (optional)
     * @param colMax  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param folds  (optional)
     * @param targetFeature  (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> getDatasetWithHttpInfo(String id, String subjectid, Integer rowStart, Integer rowMax, Integer colStart, Integer colMax, String stratify, Long seed, Integer folds, String targetFeature) throws ApiException {
        com.squareup.okhttp.Call call = getDatasetValidateBeforeCall(id, subjectid, rowStart, rowMax, colStart, colMax, stratify, seed, folds, targetFeature, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds Dataset by Id (asynchronously)
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param rowStart  (optional)
     * @param rowMax  (optional)
     * @param colStart  (optional)
     * @param colMax  (optional)
     * @param stratify  (optional)
     * @param seed  (optional)
     * @param folds  (optional)
     * @param targetFeature  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatasetAsync(String id, String subjectid, Integer rowStart, Integer rowMax, Integer colStart, Integer colMax, String stratify, Long seed, Integer folds, String targetFeature, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatasetValidateBeforeCall(id, subjectid, rowStart, rowMax, colStart, colMax, stratify, seed, folds, targetFeature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDatasetFeatures */
    private com.squareup.okhttp.Call getDatasetFeaturesCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}/features".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatasetFeaturesValidateBeforeCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDatasetFeatures(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDatasetFeaturesCall(id, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset getDatasetFeatures(String id, String subjectid) throws ApiException {
        ApiResponse<Dataset> resp = getDatasetFeaturesWithHttpInfo(id, subjectid);
        return resp.getData();
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> getDatasetFeaturesWithHttpInfo(String id, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = getDatasetFeaturesValidateBeforeCall(id, subjectid, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds Dataset by Id (asynchronously)
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatasetFeaturesAsync(String id, String subjectid, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatasetFeaturesValidateBeforeCall(id, subjectid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDatasetMeta */
    private com.squareup.okhttp.Call getDatasetMetaCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/{id}/meta".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDatasetMetaValidateBeforeCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDatasetMeta(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDatasetMetaCall(id, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dataset getDatasetMeta(String id, String subjectid) throws ApiException {
        ApiResponse<Dataset> resp = getDatasetMetaWithHttpInfo(id, subjectid);
        return resp.getData();
    }

    /**
     * Finds Dataset by Id
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dataset> getDatasetMetaWithHttpInfo(String id, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = getDatasetMetaValidateBeforeCall(id, subjectid, null, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds Dataset by Id (asynchronously)
     * Finds specified Dataset
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDatasetMetaAsync(String id, String subjectid, final ApiCallback<Dataset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDatasetMetaValidateBeforeCall(id, subjectid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listDatasets */
    private com.squareup.okhttp.Call listDatasetsCall(String subjectid, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDatasetsValidateBeforeCall(String subjectid, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listDatasetsCall(subjectid, start, max, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds all Datasets
     * Finds all Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listDatasets(String subjectid, Integer start, Integer max) throws ApiException {
        listDatasetsWithHttpInfo(subjectid, start, max);
    }

    /**
     * Finds all Datasets
     * Finds all Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listDatasetsWithHttpInfo(String subjectid, Integer start, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = listDatasetsValidateBeforeCall(subjectid, start, max, null, null);
        return apiClient.execute(call);
    }

    /**
     * Finds all Datasets (asynchronously)
     * Finds all Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDatasetsAsync(String subjectid, Integer start, Integer max, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDatasetsValidateBeforeCall(subjectid, start, max, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for listFeaturedDatasets */
    private com.squareup.okhttp.Call listFeaturedDatasetsCall(String subjectid, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/featured".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listFeaturedDatasetsValidateBeforeCall(String subjectid, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listFeaturedDatasetsCall(subjectid, start, max, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds all Datasets
     * Finds Featured Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void listFeaturedDatasets(String subjectid, Integer start, Integer max) throws ApiException {
        listFeaturedDatasetsWithHttpInfo(subjectid, start, max);
    }

    /**
     * Finds all Datasets
     * Finds Featured Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> listFeaturedDatasetsWithHttpInfo(String subjectid, Integer start, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = listFeaturedDatasetsValidateBeforeCall(subjectid, start, max, null, null);
        return apiClient.execute(call);
    }

    /**
     * Finds all Datasets (asynchronously)
     * Finds Featured Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     * @param subjectid Authorization token (optional)
     * @param start start (optional, default to 0)
     * @param max max - the server imposes an upper limit of 500 on this parameter. (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFeaturedDatasetsAsync(String subjectid, Integer start, Integer max, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFeaturedDatasetsValidateBeforeCall(subjectid, start, max, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for mergeDatasets */
    private com.squareup.okhttp.Call mergeDatasetsCall(String datasetUris, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/dataset/merge".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (datasetUris != null)
        localVarFormParams.put("dataset_uris", datasetUris);

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeDatasetsValidateBeforeCall(String datasetUris, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = mergeDatasetsCall(datasetUris, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merges Datasets
     * 
     * @param datasetUris  (optional)
     * @param subjectid  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void mergeDatasets(String datasetUris, String subjectid) throws ApiException {
        mergeDatasetsWithHttpInfo(datasetUris, subjectid);
    }

    /**
     * Merges Datasets
     * 
     * @param datasetUris  (optional)
     * @param subjectid  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> mergeDatasetsWithHttpInfo(String datasetUris, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = mergeDatasetsValidateBeforeCall(datasetUris, subjectid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Merges Datasets (asynchronously)
     * 
     * @param datasetUris  (optional)
     * @param subjectid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeDatasetsAsync(String datasetUris, String subjectid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeDatasetsValidateBeforeCall(datasetUris, subjectid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
