/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiCallback;
import jaqpot.client.ApiClient;
import jaqpot.client.ApiException;
import jaqpot.client.ApiResponse;
import jaqpot.client.Configuration;
import jaqpot.client.Pair;
import jaqpot.client.ProgressRequestBody;
import jaqpot.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import jaqpot.client.model.Report;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DoseresponseApi {
    private ApiClient apiClient;

    public DoseresponseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DoseresponseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for doseResponse */
    private com.squareup.okhttp.Call doseResponseCall(String title, String description, String datasetUri, String predictionFeature, String parameters, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/doseresponse".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (datasetUri != null)
        localVarFormParams.put("dataset_uri", datasetUri);
        if (predictionFeature != null)
        localVarFormParams.put("prediction_feature", predictionFeature);
        if (parameters != null)
        localVarFormParams.put("parameters", parameters);

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doseResponseValidateBeforeCall(String title, String description, String datasetUri, String predictionFeature, String parameters, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = doseResponseCall(title, description, datasetUri, predictionFeature, parameters, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Dose Response Report
     * Creates Dose Response Report
     * @param title  (optional)
     * @param description  (optional)
     * @param datasetUri  (optional)
     * @param predictionFeature  (optional)
     * @param parameters  (optional)
     * @param subjectid  (optional)
     * @return Report
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Report doseResponse(String title, String description, String datasetUri, String predictionFeature, String parameters, String subjectid) throws ApiException {
        ApiResponse<Report> resp = doseResponseWithHttpInfo(title, description, datasetUri, predictionFeature, parameters, subjectid);
        return resp.getData();
    }

    /**
     * Creates Dose Response Report
     * Creates Dose Response Report
     * @param title  (optional)
     * @param description  (optional)
     * @param datasetUri  (optional)
     * @param predictionFeature  (optional)
     * @param parameters  (optional)
     * @param subjectid  (optional)
     * @return ApiResponse&lt;Report&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Report> doseResponseWithHttpInfo(String title, String description, String datasetUri, String predictionFeature, String parameters, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = doseResponseValidateBeforeCall(title, description, datasetUri, predictionFeature, parameters, subjectid, null, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Dose Response Report (asynchronously)
     * Creates Dose Response Report
     * @param title  (optional)
     * @param description  (optional)
     * @param datasetUri  (optional)
     * @param predictionFeature  (optional)
     * @param parameters  (optional)
     * @param subjectid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doseResponseAsync(String title, String description, String datasetUri, String predictionFeature, String parameters, String subjectid, final ApiCallback<Report> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doseResponseValidateBeforeCall(title, description, datasetUri, predictionFeature, parameters, subjectid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
