/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiCallback;
import jaqpot.client.ApiClient;
import jaqpot.client.ApiException;
import jaqpot.client.ApiResponse;
import jaqpot.client.Configuration;
import jaqpot.client.Pair;
import jaqpot.client.ProgressRequestBody;
import jaqpot.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import jaqpot.client.model.Algorithm;
import jaqpot.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlgorithmApi {
    private ApiClient apiClient;

    public AlgorithmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlgorithmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createAlgorithm */
    private com.squareup.okhttp.Call createAlgorithmCall(Algorithm body, String subjectid, String title, String description, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/algorithm".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));
        if (title != null)
        localVarHeaderParams.put("title", apiClient.parameterToString(title));
        if (description != null)
        localVarHeaderParams.put("description", apiClient.parameterToString(description));
        if (tags != null)
        localVarHeaderParams.put("tags", apiClient.parameterToString(tags));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAlgorithmValidateBeforeCall(Algorithm body, String subjectid, String title, String description, String tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAlgorithm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createAlgorithmCall(body, subjectid, title, description, tags, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Algorithm
     * Registers a new JPDI-compliant algorithm service. When registering a new JPDI-compliant algorithm web service it is crucial to propertly annotate your algorithm with appropriate ontological classes following the &lt;a href&#x3D;\&quot;http://opentox.org/dev/apis/api-1.1/Algorithms\&quot;&gt;OpenTox algorithms ontology&lt;/a&gt;. For instance, a Clustering algorithm must be annotated with &lt;code&gt;ot:Clustering&lt;/code&gt;. It is also important for discoverability to add tags to your algorithm using the &lt;code&gt;meta.subjects&lt;/code&gt; field. An example is provided below.
     * @param body Algorithm in JSON (required)
     * @param subjectid Authorization token (optional)
     * @param title Title of your algorithm (optional)
     * @param description Short description of your algorithm (optional)
     * @param tags Tags for your algorithm (in a comma separated list) to facilitate look-up (optional)
     * @return Algorithm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Algorithm createAlgorithm(Algorithm body, String subjectid, String title, String description, String tags) throws ApiException {
        ApiResponse<Algorithm> resp = createAlgorithmWithHttpInfo(body, subjectid, title, description, tags);
        return resp.getData();
    }

    /**
     * Creates Algorithm
     * Registers a new JPDI-compliant algorithm service. When registering a new JPDI-compliant algorithm web service it is crucial to propertly annotate your algorithm with appropriate ontological classes following the &lt;a href&#x3D;\&quot;http://opentox.org/dev/apis/api-1.1/Algorithms\&quot;&gt;OpenTox algorithms ontology&lt;/a&gt;. For instance, a Clustering algorithm must be annotated with &lt;code&gt;ot:Clustering&lt;/code&gt;. It is also important for discoverability to add tags to your algorithm using the &lt;code&gt;meta.subjects&lt;/code&gt; field. An example is provided below.
     * @param body Algorithm in JSON (required)
     * @param subjectid Authorization token (optional)
     * @param title Title of your algorithm (optional)
     * @param description Short description of your algorithm (optional)
     * @param tags Tags for your algorithm (in a comma separated list) to facilitate look-up (optional)
     * @return ApiResponse&lt;Algorithm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Algorithm> createAlgorithmWithHttpInfo(Algorithm body, String subjectid, String title, String description, String tags) throws ApiException {
        com.squareup.okhttp.Call call = createAlgorithmValidateBeforeCall(body, subjectid, title, description, tags, null, null);
        Type localVarReturnType = new TypeToken<Algorithm>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Algorithm (asynchronously)
     * Registers a new JPDI-compliant algorithm service. When registering a new JPDI-compliant algorithm web service it is crucial to propertly annotate your algorithm with appropriate ontological classes following the &lt;a href&#x3D;\&quot;http://opentox.org/dev/apis/api-1.1/Algorithms\&quot;&gt;OpenTox algorithms ontology&lt;/a&gt;. For instance, a Clustering algorithm must be annotated with &lt;code&gt;ot:Clustering&lt;/code&gt;. It is also important for discoverability to add tags to your algorithm using the &lt;code&gt;meta.subjects&lt;/code&gt; field. An example is provided below.
     * @param body Algorithm in JSON (required)
     * @param subjectid Authorization token (optional)
     * @param title Title of your algorithm (optional)
     * @param description Short description of your algorithm (optional)
     * @param tags Tags for your algorithm (in a comma separated list) to facilitate look-up (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAlgorithmAsync(Algorithm body, String subjectid, String title, String description, String tags, final ApiCallback<Algorithm> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAlgorithmValidateBeforeCall(body, subjectid, title, description, tags, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Algorithm>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteAlgorithm */
    private com.squareup.okhttp.Call deleteAlgorithmCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/algorithm/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAlgorithmValidateBeforeCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAlgorithm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteAlgorithmCall(id, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unregisters an algorithm of given ID
     * Deletes an algorithm of given ID. The application of this method requires authentication and assumes certain priviledges.
     * @param id ID of the algorithm which is to be deleted. (required)
     * @param subjectid  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAlgorithm(String id, String subjectid) throws ApiException {
        deleteAlgorithmWithHttpInfo(id, subjectid);
    }

    /**
     * Unregisters an algorithm of given ID
     * Deletes an algorithm of given ID. The application of this method requires authentication and assumes certain priviledges.
     * @param id ID of the algorithm which is to be deleted. (required)
     * @param subjectid  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAlgorithmWithHttpInfo(String id, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAlgorithmValidateBeforeCall(id, subjectid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unregisters an algorithm of given ID (asynchronously)
     * Deletes an algorithm of given ID. The application of this method requires authentication and assumes certain priviledges.
     * @param id ID of the algorithm which is to be deleted. (required)
     * @param subjectid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAlgorithmAsync(String id, String subjectid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAlgorithmValidateBeforeCall(id, subjectid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAlgorithm */
    private com.squareup.okhttp.Call getAlgorithmCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/algorithm/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list", "application/ld+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlgorithmValidateBeforeCall(String id, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAlgorithm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAlgorithmCall(id, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds Algorithm
     * Finds Algorithm with provided name
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return Algorithm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Algorithm getAlgorithm(String id, String subjectid) throws ApiException {
        ApiResponse<Algorithm> resp = getAlgorithmWithHttpInfo(id, subjectid);
        return resp.getData();
    }

    /**
     * Finds Algorithm
     * Finds Algorithm with provided name
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @return ApiResponse&lt;Algorithm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Algorithm> getAlgorithmWithHttpInfo(String id, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = getAlgorithmValidateBeforeCall(id, subjectid, null, null);
        Type localVarReturnType = new TypeToken<Algorithm>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds Algorithm (asynchronously)
     * Finds Algorithm with provided name
     * @param id  (required)
     * @param subjectid Authorization token (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlgorithmAsync(String id, String subjectid, final ApiCallback<Algorithm> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlgorithmValidateBeforeCall(id, subjectid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Algorithm>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAlgorithms */
    private com.squareup.okhttp.Call getAlgorithmsCall(String subjectid, String propertyClass, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/algorithm".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (propertyClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "class", propertyClass));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlgorithmsValidateBeforeCall(String subjectid, String propertyClass, Integer start, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAlgorithmsCall(subjectid, propertyClass, start, max, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Finds all Algorithms
     * Finds all Algorithms JaqpotQuattro supports
     * @param subjectid Authorization token (optional)
     * @param propertyClass class (optional)
     * @param start start (optional, default to 0)
     * @param max max (optional, default to 10)
     * @return List&lt;Algorithm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Algorithm> getAlgorithms(String subjectid, String propertyClass, Integer start, Integer max) throws ApiException {
        ApiResponse<List<Algorithm>> resp = getAlgorithmsWithHttpInfo(subjectid, propertyClass, start, max);
        return resp.getData();
    }

    /**
     * Finds all Algorithms
     * Finds all Algorithms JaqpotQuattro supports
     * @param subjectid Authorization token (optional)
     * @param propertyClass class (optional)
     * @param start start (optional, default to 0)
     * @param max max (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Algorithm&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Algorithm>> getAlgorithmsWithHttpInfo(String subjectid, String propertyClass, Integer start, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = getAlgorithmsValidateBeforeCall(subjectid, propertyClass, start, max, null, null);
        Type localVarReturnType = new TypeToken<List<Algorithm>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Finds all Algorithms (asynchronously)
     * Finds all Algorithms JaqpotQuattro supports
     * @param subjectid Authorization token (optional)
     * @param propertyClass class (optional)
     * @param start start (optional, default to 0)
     * @param max max (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlgorithmsAsync(String subjectid, String propertyClass, Integer start, Integer max, final ApiCallback<List<Algorithm>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlgorithmsValidateBeforeCall(subjectid, propertyClass, start, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Algorithm>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for modifyAlgorithm */
    private com.squareup.okhttp.Call modifyAlgorithmCall(String id, String body, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/algorithm/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyAlgorithmValidateBeforeCall(String id, String body, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifyAlgorithm(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling modifyAlgorithm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = modifyAlgorithmCall(id, body, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modifies a particular Algorithm resource
     * Modifies (applies a patch on) an Algorithm resource of a given ID. This implementation of PATCH follows the RFC 6902 proposed standard. See https://tools.ietf.org/rfc/rfc6902.txt for details.
     * @param id ID of an existing BibTeX. (required)
     * @param body The patch in JSON according to the RFC 6902 specs (required)
     * @param subjectid Clients need to authenticate in order to create resources on the server (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void modifyAlgorithm(String id, String body, String subjectid) throws ApiException {
        modifyAlgorithmWithHttpInfo(id, body, subjectid);
    }

    /**
     * Modifies a particular Algorithm resource
     * Modifies (applies a patch on) an Algorithm resource of a given ID. This implementation of PATCH follows the RFC 6902 proposed standard. See https://tools.ietf.org/rfc/rfc6902.txt for details.
     * @param id ID of an existing BibTeX. (required)
     * @param body The patch in JSON according to the RFC 6902 specs (required)
     * @param subjectid Clients need to authenticate in order to create resources on the server (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> modifyAlgorithmWithHttpInfo(String id, String body, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = modifyAlgorithmValidateBeforeCall(id, body, subjectid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Modifies a particular Algorithm resource (asynchronously)
     * Modifies (applies a patch on) an Algorithm resource of a given ID. This implementation of PATCH follows the RFC 6902 proposed standard. See https://tools.ietf.org/rfc/rfc6902.txt for details.
     * @param id ID of an existing BibTeX. (required)
     * @param body The patch in JSON according to the RFC 6902 specs (required)
     * @param subjectid Clients need to authenticate in order to create resources on the server (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyAlgorithmAsync(String id, String body, String subjectid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyAlgorithmValidateBeforeCall(id, body, subjectid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for trainModel */
    private com.squareup.okhttp.Call trainModelCall(String title, String description, String id, String datasetUri, String predictionFeature, String parameters, String transformations, String scaling, String doa, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/algorithm/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (subjectid != null)
        localVarHeaderParams.put("subjectid", apiClient.parameterToString(subjectid));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (title != null)
        localVarFormParams.put("title", title);
        if (description != null)
        localVarFormParams.put("description", description);
        if (datasetUri != null)
        localVarFormParams.put("dataset_uri", datasetUri);
        if (predictionFeature != null)
        localVarFormParams.put("prediction_feature", predictionFeature);
        if (parameters != null)
        localVarFormParams.put("parameters", parameters);
        if (transformations != null)
        localVarFormParams.put("transformations", transformations);
        if (scaling != null)
        localVarFormParams.put("scaling", scaling);
        if (doa != null)
        localVarFormParams.put("doa", doa);

        final String[] localVarAccepts = {
            "application/json", "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trainModelValidateBeforeCall(String title, String description, String id, String datasetUri, String predictionFeature, String parameters, String transformations, String scaling, String doa, String subjectid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling trainModel(Async)");
        }
        
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling trainModel(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trainModel(Async)");
        }
        
        
        com.squareup.okhttp.Call call = trainModelCall(title, description, id, datasetUri, predictionFeature, parameters, transformations, scaling, doa, subjectid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Creates Model
     * Applies Dataset and Parameters on Algorithm and creates Model.
     * @param title  (required)
     * @param description  (required)
     * @param id  (required)
     * @param datasetUri  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/dataset/corona)
     * @param predictionFeature  (optional, default to https://apps.ideaconsult.net/enmtest/property/TOX/UNKNOWN_TOXICITY_SECTION/Log2+transformed/94D664CFE4929A0F400A5AD8CA733B52E049A688/3ed642f9-1b42-387a-9966-dea5b91e5f8a)
     * @param parameters  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param doa  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/leverage)
     * @param subjectid  (optional)
     * @return Task
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Task trainModel(String title, String description, String id, String datasetUri, String predictionFeature, String parameters, String transformations, String scaling, String doa, String subjectid) throws ApiException {
        ApiResponse<Task> resp = trainModelWithHttpInfo(title, description, id, datasetUri, predictionFeature, parameters, transformations, scaling, doa, subjectid);
        return resp.getData();
    }

    /**
     * Creates Model
     * Applies Dataset and Parameters on Algorithm and creates Model.
     * @param title  (required)
     * @param description  (required)
     * @param id  (required)
     * @param datasetUri  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/dataset/corona)
     * @param predictionFeature  (optional, default to https://apps.ideaconsult.net/enmtest/property/TOX/UNKNOWN_TOXICITY_SECTION/Log2+transformed/94D664CFE4929A0F400A5AD8CA733B52E049A688/3ed642f9-1b42-387a-9966-dea5b91e5f8a)
     * @param parameters  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param doa  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/leverage)
     * @param subjectid  (optional)
     * @return ApiResponse&lt;Task&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Task> trainModelWithHttpInfo(String title, String description, String id, String datasetUri, String predictionFeature, String parameters, String transformations, String scaling, String doa, String subjectid) throws ApiException {
        com.squareup.okhttp.Call call = trainModelValidateBeforeCall(title, description, id, datasetUri, predictionFeature, parameters, transformations, scaling, doa, subjectid, null, null);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates Model (asynchronously)
     * Applies Dataset and Parameters on Algorithm and creates Model.
     * @param title  (required)
     * @param description  (required)
     * @param id  (required)
     * @param datasetUri  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/dataset/corona)
     * @param predictionFeature  (optional, default to https://apps.ideaconsult.net/enmtest/property/TOX/UNKNOWN_TOXICITY_SECTION/Log2+transformed/94D664CFE4929A0F400A5AD8CA733B52E049A688/3ed642f9-1b42-387a-9966-dea5b91e5f8a)
     * @param parameters  (optional)
     * @param transformations  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/pmml/corona-standard-transformations)
     * @param scaling  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/standarization)
     * @param doa  (optional, default to http://app.jaqpot.org:8080/jaqpot/services/algorithm/leverage)
     * @param subjectid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trainModelAsync(String title, String description, String id, String datasetUri, String predictionFeature, String parameters, String transformations, String scaling, String doa, String subjectid, final ApiCallback<Task> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trainModelValidateBeforeCall(title, description, id, datasetUri, predictionFeature, parameters, transformations, scaling, doa, subjectid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Task>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
