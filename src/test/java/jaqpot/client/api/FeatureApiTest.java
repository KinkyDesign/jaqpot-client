/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiException;
import jaqpot.client.model.Feature;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for FeatureApi
 */
@Ignore
public class FeatureApiTest {

    private final FeatureApi api = new FeatureApi();

    
    /**
     * Creates a new Feature
     *
     * Creates a new feature which is assigned a random unique ID. When creating a new feature, clients must wary not only for its syntactic correctness, but also for its semantic completeness. It is strongly recommended to add a comprehensive and identifying title to your feature using the &lt;code&gt;meta.titles&lt;/code&gt; field, to add a description in &lt;code&gt;meta.descriptions&lt;/code&gt; and also to add a list of tags in &lt;code&gt;meta.subjects&lt;/code&gt; that will facilitate the discoverability of your features later. Additionally, all features should be annotated with appropriate ontological classes (from the OpenTox ontology), such as &lt;code&gt;ot:Feature&lt;/code&gt;, &lt;code&gt;ot:NumericFeature&lt;/code&gt; and &lt;code&gt;ot:NominalFeature&lt;/code&gt;. Features that are created as prediction features for a model or are descriptors that can be calculated using a descriptor calculation web service should be linked to this/these service(s) using &lt;code&gt;meta.hasSources&lt;/code&gt;. Finally, nominal features should define their admissible values in &lt;code&gt;admissibleValues&lt;/code&gt;. Malformed feature documents will not be accepted by the server and an error report will be generated and returned to the client. Notice also that authentication, authorization and accounting restrictions may apply.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFeatureTest() throws ApiException {
        Feature body = null;
        String subjectid = null;
        api.createFeature(body, subjectid);

        // TODO: test validations
    }
    
    /**
     * Deletes a particular Feature resource.
     *
     * Deletes a Feature of a given ID. The method is idempondent, that is, it can be used more than once without triggering an exception/error. If the Feature does not exist, the method will return without errors. Authentication and authorization requirements apply, so clients that are not authenticated with a valid token or do not have sufficient priviledges will not be able to delete a Feature using this method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFeatureTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.deleteFeature(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Feature by ID
     *
     * Finds specified Feature (by ID)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeatureTest() throws ApiException {
        String id = null;
        String subjectid = null;
        Feature response = api.getFeature(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Lists features
     *
     * Lists Feature entries in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the features, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFeaturesTest() throws ApiException {
        String subjectid = null;
        String query = null;
        Integer start = null;
        Integer max = null;
        api.listFeatures(subjectid, query, start, max);

        // TODO: test validations
    }
    
    /**
     * Places a new Feature at a particular URI
     *
     * Creates a new Feature entry at the specified URI. If a Feature already exists at this URI,it will be replaced. If, instead, no Feature is stored under the specified URI, a new Feature entry will be created. Notice that authentication, authorization and accounting (quota) restrictions may apply.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putFeatureTest() throws ApiException {
        String id = null;
        Feature body = null;
        String subjectid = null;
        api.putFeature(id, body, subjectid);

        // TODO: test validations
    }
    
}
