/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiException;
import jaqpot.client.model.Model;
import jaqpot.client.model.Task;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for ModelApi
 */
@Ignore
public class ModelApiTest {

    private final ModelApi api = new ModelApi();

    
    /**
     * Deletes a particular Model resource
     *
     * Deletes a Model of a given ID. The method is idempondent, that is it can be used more than once without triggering an exception/error. If the Model does not exist, the method will return without errors. Authentication and authorization requirements apply, so clients that are not authenticated with a valid token or do not have sufficient priviledges will not be able to delete Models using this method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.deleteModel(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Model by Id
     *
     * Finds specified Model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelTest() throws ApiException {
        String id = null;
        String subjectid = null;
        Model response = api.getModel(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Model by Id
     *
     * Finds specified Model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelPmmlTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.getModelPmml(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds all Models
     *
     * Finds featured Models from Jaqpot database. The response will list all models and will return either a URI list of a list of JSON model objects. In the latter case, only the IDs, metadata, ontological classes and reliability of the models will be returned. Use the parameters start and max to get paginated results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFeaturedModelsTest() throws ApiException {
        String subjectid = null;
        Integer start = null;
        Integer max = null;
        api.listFeaturedModels(subjectid, start, max);

        // TODO: test validations
    }
    
    /**
     * Lists the dependent features of a Model
     *
     * Lists the dependent features of a Model identified by its ID. The result is available as a URI list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModelDependentFeaturesTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.listModelDependentFeatures(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Lists the independent features of a Model
     *
     * Lists the independent features of a Model. The result is available as a URI list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModelIndependentFeaturesTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.listModelIndependentFeatures(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Lists the dependent features of a Model
     *
     * Lists the predicted features of a Model identified by its ID. The result is available as a URI list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModelPredictedFeaturesTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.listModelPredictedFeatures(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Lists the required features of a Model
     *
     * Lists the required features of a Model identified by its ID. The result is available as a URI list.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModelRequiredFeaturesTest() throws ApiException {
        String id = null;
        String subjectId = null;
        List<String> response = api.listModelRequiredFeatures(id, subjectId);

        // TODO: test validations
    }
    
    /**
     * Finds all Models
     *
     * Finds all Models from Jaqpot Dataset. The response will list all models and will return either a URI list of a list of JSON model objects. In the latter case, only the IDs, metadata, ontological classes and reliability of the models will be returned. Use the parameters start and max to get paginated results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listModelsTest() throws ApiException {
        String subjectid = null;
        Integer start = null;
        Integer max = null;
        api.listModels(subjectid, start, max);

        // TODO: test validations
    }
    
    /**
     * Creates Prediction
     *
     * Creates Prediction
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void makePredictionTest() throws ApiException {
        String datasetUri = null;
        String id = null;
        Boolean visible = null;
        String subjectid = null;
        Task response = api.makePrediction(datasetUri, id, visible, subjectid);

        // TODO: test validations
    }
    
}
