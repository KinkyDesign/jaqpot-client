/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiException;
import jaqpot.client.model.Algorithm;
import jaqpot.client.model.Task;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for AlgorithmApi
 */
@Ignore
public class AlgorithmApiTest {

    String subjectid= "AQIC5wM2LY4SfczsPMl3TBaOpNT75Rjt8A1wc6gjBky8-5I.*AAJTSQACMDEAAlNLABMtNjYyNDUwMjMzODA2NzI0OTkw*";
    private final AlgorithmApi api = new AlgorithmApi();

    
    /**
     * Creates Algorithm
     *
     * Registers a new JPDI-compliant algorithm service. When registering a new JPDI-compliant algorithm web service it is crucial to propertly annotate your algorithm with appropriate ontological classes following the &lt;a href&#x3D;\&quot;http://opentox.org/dev/apis/api-1.1/Algorithms\&quot;&gt;OpenTox algorithms ontology&lt;/a&gt;. For instance, a Clustering algorithm must be annotated with &lt;code&gt;ot:Clustering&lt;/code&gt;. It is also important for discoverability to add tags to your algorithm using the &lt;code&gt;meta.subjects&lt;/code&gt; field. An example is provided below.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAlgorithmTest() throws ApiException {
        Algorithm body = null;
        String title = null;
        String description = null;
        String tags = null;

        Algorithm response = api.createAlgorithm(body, subjectid, title, description, tags);

        // TODO: test validations
    }
    
    /**
     * Unregisters an algorithm of given ID
     *
     * Deletes an algorithm of given ID. The application of this method requires authentication and assumes certain priviledges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAlgorithmTest() throws ApiException {
        String id = null;
        api.deleteAlgorithm(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Algorithm
     *
     * Finds Algorithm with provided name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlgorithmTest() throws ApiException {
        String id = "ocpu-lm";
        Algorithm response = api.getAlgorithm(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds all Algorithms
     *
     * Finds all Algorithms JaqpotQuattro supports
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAlgorithmsTest() throws ApiException {
        String propertyClass = null;
        Integer start = null;
        Integer max = null;
        List<Algorithm> response = api.getAlgorithms(subjectid, propertyClass, start, max);

        // TODO: test validations
    }
    
    /**
     * Modifies a particular Algorithm resource
     *
     * Modifies (applies a patch on) an Algorithm resource of a given ID. This implementation of PATCH follows the RFC 6902 proposed standard. See https://tools.ietf.org/rfc/rfc6902.txt for details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyAlgorithmTest() throws ApiException {
        String id = null;
        String body = null;
        api.modifyAlgorithm(id, body, subjectid);

        // TODO: test validations
    }
    
    /**
     * Creates Model
     *
     * Applies Dataset and Parameters on Algorithm and creates Model.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainModelTest() throws ApiException {
        String title = null;
        String description = null;
        String id = null;
        String datasetUri = null;
        String predictionFeature = null;
        String parameters = null;
        String transformations = null;
        String scaling = null;
        String doa = null;
        Task response = api.trainModel(title, description, id, datasetUri, predictionFeature, parameters, transformations, scaling, doa, subjectid);

        // TODO: test validations
    }
    
}
