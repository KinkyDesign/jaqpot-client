/*
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package jaqpot.client.api;

import jaqpot.client.ApiException;
import jaqpot.client.model.Dataset;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for DatasetApi
 */
@Ignore
public class DatasetApiTest {

    private final DatasetApi api = new DatasetApi();

    
    /**
     * Creates a new Dataset
     *
     * The new Dataset created will be assigned on a random generated Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDatasetTest() throws ApiException {
        String subjectid = null;
        Dataset body = null;
        Dataset response = api.createDataset(subjectid, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new empty Dataset
     *
     * The new empty Dataset created will be assigned on a random generated Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEmptyDatasetTest() throws ApiException {
        String subjectid = null;
        String title = null;
        String description = null;
        Dataset response = api.createEmptyDataset(subjectid, title, description);

        // TODO: test validations
    }
    
    /**
     * Creates QPRF Report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQPRFReportTest() throws ApiException {
        String id = null;
        String subjectid = null;
        String substanceUri = null;
        String title = null;
        String description = null;
        api.createQPRFReport(id, subjectid, substanceUri, title, description);

        // TODO: test validations
    }
    
    /**
     * Creates QPRF Report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQPRFReportDummyTest() throws ApiException {
        String id = null;
        String subjectid = null;
        String substanceUri = null;
        String title = null;
        String description = null;
        api.createQPRFReportDummy(id, subjectid, substanceUri, title, description);

        // TODO: test validations
    }
    
    /**
     * Deletes dataset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDatasetTest() throws ApiException {
        String id = null;
        String subjectid = null;
        api.deleteDataset(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Dataset by Id
     *
     * Finds specified Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetTest() throws ApiException {
        String id = null;
        String subjectid = null;
        Integer rowStart = null;
        Integer rowMax = null;
        Integer colStart = null;
        Integer colMax = null;
        String stratify = null;
        Long seed = null;
        Integer folds = null;
        String targetFeature = null;
        Dataset response = api.getDataset(id, subjectid, rowStart, rowMax, colStart, colMax, stratify, seed, folds, targetFeature);

        // TODO: test validations
    }
    
    /**
     * Finds Dataset by Id
     *
     * Finds specified Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetFeaturesTest() throws ApiException {
        String id = null;
        String subjectid = null;
        Dataset response = api.getDatasetFeatures(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds Dataset by Id
     *
     * Finds specified Dataset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDatasetMetaTest() throws ApiException {
        String id = null;
        String subjectid = null;
        Dataset response = api.getDatasetMeta(id, subjectid);

        // TODO: test validations
    }
    
    /**
     * Finds all Datasets
     *
     * Finds all Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDatasetsTest() throws ApiException {
        String subjectid = null;
        Integer start = null;
        Integer max = null;
        api.listDatasets(subjectid, start, max);

        // TODO: test validations
    }
    
    /**
     * Finds all Datasets
     *
     * Finds Featured Datasets in the DB of Jaqpot and returns them in a list. Results can be obtained either in the form of a URI list or as a JSON list as specified by the Accept HTTP header. In the latter case, a list will be returned containing only the IDs of the datasets, their metadata and their ontological classes. The parameter max, which specifies the maximum number of IDs to be listed is limited to 500; if the client specifies a larger value, an HTTP Warning Header will be returned (RFC 2616) with code P670.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFeaturedDatasetsTest() throws ApiException {
        String subjectid = null;
        Integer start = null;
        Integer max = null;
        api.listFeaturedDatasets(subjectid, start, max);

        // TODO: test validations
    }
    
    /**
     * Merges Datasets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeDatasetsTest() throws ApiException {
        String datasetUris = null;
        String subjectid = null;
        api.mergeDatasets(datasetUris, subjectid);

        // TODO: test validations
    }
    
}
